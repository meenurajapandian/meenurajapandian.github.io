<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meenu Rajapandian</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://meenurajapandian.github.io/</link>
    <atom:link href="http://meenurajapandian.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 06 Feb 2020 17:12:06 -0500</pubDate>
    <lastBuildDate>Thu, 06 Feb 2020 17:12:06 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Git and GitHub</title>
        <description>&lt;p&gt;git = version control
github = web service&lt;/p&gt;

&lt;p&gt;Linux Commands
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to go to a certain directory
&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; current directory (not necessary in git bash)
&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; lists all files and folders in the current directory
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ..&lt;/code&gt; to go to the previous folders&lt;/p&gt;

&lt;p&gt;repo is on github and it needs to be cloned and the files added.&lt;/p&gt;

&lt;p&gt;repo exists locally, initialize git and put it on github&lt;/p&gt;

&lt;p&gt;Git Bash Commands&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git clone https://github.com/meenurajapandian/direc.git
&lt;/code&gt;
clone existing repository on git hub to local directory
creates a repository just like the one in git hub in the current directory&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add filename.c
&lt;/code&gt;
adds filename to the staging area&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add -A
&lt;/code&gt;
adds all files to the staging area&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git commit -a -m &quot;Commit Message&quot;
&lt;/code&gt;
commits the changes made, commit message is compulsory&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git status
&lt;/code&gt;
shows the status of the git directory. shows which branch, list of files which are modified but not committed, list of files that are not tracked&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git log -2
&lt;/code&gt;
shows the last commit&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
:q
&lt;/code&gt;
if you find yourself in a weird place&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git remote -v
&lt;/code&gt;
lists the branches, list the origin of the github repository&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push origin master
&lt;/code&gt;
to push the changes to github. master is the branch name&lt;/p&gt;

&lt;p&gt;If the current directory is not a git repository&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git init
&lt;/code&gt;
initializes empty git&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add -A
&lt;/code&gt;
adds files to staging area&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git commit
&lt;/code&gt;
commits the changes that are made&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git remote add origin
&lt;/code&gt;
links current local directory with a repo on github&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push origin master
&lt;/code&gt;
push changes to remote&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git pull origin master
&lt;/code&gt;
If changes are made on the hub and they need to reflected in the local directory. This has to be done before git push if you have changes in github that are not in the current local directory&lt;/p&gt;

&lt;p&gt;To commit to a new branch
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout -b your-new-branch
&lt;/code&gt;
Creates a new branch by the given name
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add &amp;lt;files&amp;gt;
git commit -m &quot;message&quot;
git push origin your-new-branch
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To tell git not to track some files
&lt;code class=&quot;highlighter-rouge&quot;&gt;
touch .gitignore
&lt;/code&gt;
Creates a gitignore file
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add .gitignore
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;.gitignore is a hidden file and needs to be edited to add all files and directory that should not be tracked
Sample .gitignore file&lt;/p&gt;

&lt;p&gt;```
directory1/
directory2/&lt;/p&gt;

&lt;p&gt;file1.csv
file2.csv
```&lt;/p&gt;

&lt;p&gt;Something&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jan 2020 19:20:41 -0500</pubDate>
        <link>http://meenurajapandian.github.io/jekyll/update/2020/01/20/git-github.html</link>
        <guid isPermaLink="true">http://meenurajapandian.github.io/jekyll/update/2020/01/20/git-github.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Continuous Time Markov Chain</title>
        <description>&lt;p&gt;Until now, we would check the state of our process at every predetermined amount of time (epoch). But what if the process could let us know when the transition takes place? In our manufacturing process example, instead of checking the state of the product every one hour, we instead make a note of the transition of the product to a different state whenever it happens - 0.5 hrs, 2.75 hr, 3.5 hrs - it doesn’t matter. Such a model of stochastic process is called a Continuous Time Markov Chain*&lt;/p&gt;

&lt;p&gt;The Markov Assumption and stationarity assumption holds true even here. The Markov Assumption says that the probability that we will be in a certain state j at a time t given that we are in state i is independent of where the model was before or even how long we were in state i. Note that the the Markov Assumption for a continuous state markov process is stronger in the sense it doesn’t matter if I just entered my current state or if I have been in my current state for 10 hrs, the probability that I will be in state j after time t (from now) is the same. You might ask does this make sense? Where in the real world can I reasonably use this assumption. Let’s say you are outside the Engineering Building in your University selling cupcakes to raise funds. It doesn’t matter if you just set up your table or if you have been standing there for 2hrs now, the rate at which the customer comes and by extension the probability that a customer will buy a cake after time t and change your state from n cupcakes to n-1 is the same. (Ignore lunch times and out of standard hours possibilities). In situations like this where you can model your – as an exponential random variable, the Markov assumption is valid. The stationarity assumption just means the model we have built is can remain the same throughout our time of asking questions?&lt;/p&gt;

&lt;p&gt;If we used the Transition Probability Matrix for Discrete time Markov Chains, we will use something called the transition rate matrix for continuous time markov chain. Think of it as the rate at which the state goes from i to j.&lt;/p&gt;

&lt;p&gt;The transitions can occur at literally any instant. Then we would have to keep track of an infinite number of discrete time possibilities&lt;/p&gt;

&lt;p&gt;Since we have continuous time and we cannot count it as discrete steps, we use the rate at which the state changes rather than the probability. In our cupcake example, we might be selling, on an average, 1 cupcake every 30 minutes. Hence the transition rate of going from n cupcakes to n-1 is 1/30 if I consider the unit as minutes or 2 if I consider the unit as hours.&lt;/p&gt;

&lt;p&gt;Embedded Markov Chain
How would you&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Apr 2019 20:20:41 -0400</pubDate>
        <link>http://meenurajapandian.github.io/jekyll/update/2019/04/15/continuous-time-markov-chain.html</link>
        <guid isPermaLink="true">http://meenurajapandian.github.io/jekyll/update/2019/04/15/continuous-time-markov-chain.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 09 Mar 2019 19:20:41 -0500</pubDate>
        <link>http://meenurajapandian.github.io/jekyll/update/2019/03/09/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://meenurajapandian.github.io/jekyll/update/2019/03/09/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Graphviz</title>
        <description>&lt;p&gt;Using graphviz&lt;/p&gt;

&lt;p&gt;From networkx graph to dot file&lt;/p&gt;

&lt;p&gt;from networkx.drawing.nx_pydot import write_dot
write_dot(G, ‘file.dot’)&lt;/p&gt;

&lt;p&gt;neato -Gbgcolor=transparent -Nshape=point -Nstyle=filled -Ncolor=”#00ff005f” -Nfillcolor=”#00ff005f” -Nwidth=0.02 -Nheight=0.02 -Eweight=0.01 -Ecolor=”#00ff005f” -Tpng file.dot -o outfile.png&lt;/p&gt;

&lt;p&gt;-Goverlap=scale
-Goverlap=false&lt;/p&gt;

&lt;p&gt;Install graphviz with triangulation library&lt;/p&gt;

&lt;p&gt;sudo apt purge graphviz
sudo apt install -y libgd-dev
sudo apt install -y fontconfig
sudo apt install -y libcairo2-dev
sudo apt install -y libpango1.0-dev
sudo apt install -y libgts-dev&lt;/p&gt;

&lt;p&gt;run sudo pkg-config –libs gts&lt;/p&gt;

&lt;p&gt;run sudo pkg-config –cflags gts&lt;/p&gt;

&lt;p&gt;Download graphviz-2.40.1.tar.gz from here&lt;/p&gt;

&lt;p&gt;Navigate to directory containing download, and extract with tar -xvf graphviz-2.40.1.tar.gz (or newer whatever the download is named.)&lt;/p&gt;

&lt;p&gt;cd into extracted folder (ie cd graphviz-2.40.1) and run sudo ./configure –with-gts&lt;/p&gt;

&lt;p&gt;Run sudo make in the folder
Run sudo make install in the folder
Reinstall library using pip install graphviz&lt;/p&gt;

&lt;p&gt;https://www.graphviz.org/doc/info/attrs.html
https://graphviz.gitlab.io/_pages/pdf/dot.1.pdf
https://graphviz.gitlab.io/_pages/doc/info/command.html
https://graphviz.gitlab.io/_pages/pdf/neatoguide.pdf
https://renenyffenegger.ch/notes/tools/Graphviz/examples/index
https://www.tonyballantyne.com/graphs.html
https://graphviz.readthedocs.io/en/stable/api.html&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Mar 2019 19:20:41 -0500</pubDate>
        <link>http://meenurajapandian.github.io/jekyll/update/2019/03/01/using-graphviz-and-dot.html</link>
        <guid isPermaLink="true">http://meenurajapandian.github.io/jekyll/update/2019/03/01/using-graphviz-and-dot.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Communities and Modularity</title>
        <description>&lt;p&gt;community
noun&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A group of people living in the same place or having a particular characteristic in common.
‘Montreal’s Italian community’
‘the gay community in London’
‘the scientific community’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mass noun The condition of sharing or having certain attitudes and interests in common.
‘the sense of community that organized religion can provide’&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We all know what a community means and what it means to be a part of it. If a person came up to you and asked if you belong to a certain community and who are the other people in that community, you can almost immediately answer the question with a list of names, perhaps incomplete, but almost always correct. A kid will immediately list out his/her best friends and the community (s)he belongs to in school. Intuitively, we all know what a community means. But how do we translate this mathematically?&lt;/p&gt;

&lt;p&gt;All of the above examples only described communities in a social setting - a social network. But isn’t it also possible to find communities in the animal kingdom, telephone network, the world wide web, your anatomy, etc? We struggle a bit, but we can soon see how the idea of a community can be extended to different networks, but what does it mean for a set of entities to be a part of a community, mathematically? There have been a number of studies on how to define a community, find how many communities are present in a network and also how to segregate them. But there is still no consensus on a single or a set of frameworks that would work for different networks.&lt;/p&gt;

&lt;p&gt;One of the first papers on community detection methods that I read was the ``Modularity and Community Structure in Network”. The central idea of the paper was that if there are more than expected edges within a module (community) or equivalently, if there are less than expected edges between modules, we can conclude the current segregation is the most optimal method of dividing the network into communities. This is done by maximizing the modularity of the network given by
[
Q = \frac{1}{2m} \sum_{ij} (A_{ij} - \frac{k_ik_j}{2m}) \delta_{ij}
]
where $A_{ij}$ is the edge weight between nodes $i$ and $j$, $k_i$ is the degree of node $i$, $m$ is the total number of edges in the network, and $\delta_{ij}$ is the Kronecker’s delta which is 1 if the nodes $i$ and $j$ belong to the same community.&lt;/p&gt;

&lt;p&gt;Let’s take a step back and have a closer look at what the formula represents. The term within the summation is only taken into account when the two nodes $i$ and $j$ belong to the same community. The term is rewarding (towards modularity) when two nodes of relatively low degrees that belong to the same module are directly connected and the least contribution to modularity when two nodes of very high degrees are directly connected within the module since it is not a very surprising possibility. In fact term gives a high negative value when two nodes of very high degree belong to the same module. You can think of it as the nodes of high degree repelling each other and the nodes of lower degree connected to these high degree nodes following them to form modules. If this results in a node pair that have low degrees to be assigned to the same module and are connected, then there is a positive contribution to the modularity value. The network is divided into two communities by maximizing this modularity value.&lt;/p&gt;

&lt;p&gt;Skipping the theory behind how this algorithm came to be from the formula above, the method of dividing the network into 2 communities is as follows:&lt;/p&gt;

&lt;p&gt;\begin{enumerate}
    \item Find the Modularity matrix $B = A - \frac{kk^T}{2m}$ where k is the vector of degree of all nodes
    \item Compute the eigen value and eigen vector of the modularity matrix B.
    \item The eigen vector corresponding to the highest eigen value represents the communities of the network. All node positions with positive values of the vector correspond to one community and the negative values correspond to a different community. If all the positions of this eigen vector have the same sign then they cannot be divided and all nodes belong to a single community.
\end{enumerate}&lt;/p&gt;

&lt;p&gt;To divide the network into more than two communities, the same method as above is applied to the different community subgraphs with a small change. Instead of maximizing the modularity, we try to maximize the contribution to modularity by dividing the subgraph. Alternatively, we subtract the contribution from the modularity matrix towards the previous division and follow the eigenvalue decomposition method for the remaining values.&lt;/p&gt;

&lt;p&gt;Hence the modularity matrix for the subgraph to be divided is
[
B_{ij}^{(g)} = B_{ij} - \delta_{ij} \sum_{k\in g} B_{ik}
]
where $B^{(g)}$ is the modularity matrix of the subgraph to be divided&lt;/p&gt;

&lt;p&gt;If the maximum eigen value of this matrix is positive, then the community can be divided further according to the signs of the corresponding eigen vector. If the maximum eigen value is negative or 0, then the community cannot be divided further. This is done for all subgraph resulting from further division until we cannot divide them anymore.&lt;/p&gt;

&lt;p&gt;This method gives excellent results in dividing a number of networks with widely known communities. However, it does not show the robustness of the method by it’s comparison with other network metrics. Although it shows that this method gives higher modularity values for the network than other segregation methods, is it really fair to use the same computation that was maximised to also find the robustness/accuracy of the method in finding communities. There is a need to find other network measurements that also indicate how the resulting division of network into communities is accurate(not really but close) especially for those networks for which we do not have real world data about their communities.&lt;/p&gt;

&lt;p&gt;The complexity of this method is also quite high - since we need to find the eigenvalue decomposition for every division of the network. However this is better than the methods that were used before this paper was published.&lt;/p&gt;

&lt;p&gt;This method gives a network hard boundaries of which communities the nodes belong to. But in this complex world, where we have access to high resolution network data, isn’t it more likely that each node belongs to different communities at different levels of strength? The search for a better method continues…&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Mar 2019 19:20:41 -0500</pubDate>
        <link>http://meenurajapandian.github.io/jekyll/update/2019/03/01/newman-modularity.html</link>
        <guid isPermaLink="true">http://meenurajapandian.github.io/jekyll/update/2019/03/01/newman-modularity.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
