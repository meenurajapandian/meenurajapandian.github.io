<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meenu Rajapandian</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://meenurajapandian.github.io/</link>
    <atom:link href="http://meenurajapandian.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 07 Feb 2020 13:06:03 -0500</pubDate>
    <lastBuildDate>Fri, 07 Feb 2020 13:06:03 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Git and Github</title>
        <description>&lt;p&gt;Git is a distributed version control system. A version control system handles different versions of a project as it evolves especially when many people are contributing toward the same project. Github on the other hand is … But I don’t want to elaborate on them as much. Let’s just jump to actually using git for your projects.&lt;/p&gt;

&lt;p&gt;Usually people want to use github in one of these circumstances.&lt;/p&gt;

&lt;p&gt;They already have a some files as part of the project and want to put it on github or start using git for&lt;/p&gt;

&lt;p&gt;You are starting completely new and you still don’t have anything yet&lt;/p&gt;

&lt;p&gt;Follow these steps for option 1
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git init
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add -A
&lt;/code&gt;
adds files to staging area&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git commit
&lt;/code&gt;
commits the changes that are made&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git remote add origin
&lt;/code&gt;
links current local directory with a repo on github&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push origin master
&lt;/code&gt;
push changes to remote&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git pull origin master
&lt;/code&gt;
If changes are made on the hub and they need to reflected in the local directory. This has to be done before git push if you have changes in github that are not in the current local directory&lt;/p&gt;

&lt;p&gt;For Option 2 - starting fresh or from repo in github
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git clone https://github.com/meenurajapandian/direc.git
&lt;/code&gt;
clone existing repository on git hub to local directory
creates a repository just like the one in git hub in the current directory&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add filename.c
&lt;/code&gt;
adds filename to the staging area&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add -A
&lt;/code&gt;
adds all files to the staging area&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git commit -a -m &quot;Commit Message&quot;
&lt;/code&gt;
commits the changes made, commit message is compulsory&lt;/p&gt;

&lt;p&gt;As you continue to use git and github you might come across times where you want to try something different for the project but do not want to mess up your current state of the project just yet. In that case you can create a new branch and work on that branch instead of your main master branch. This is the git’s version of naming your files differently so that you can keep track of them. No more final.py final_v1.py final_final_v7.py&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout -b your-new-branch
&lt;/code&gt;
Creates a new branch by the given name
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add &amp;lt;files&amp;gt;
git commit -m &quot;message&quot;
git push origin your-new-branch
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now the changes are made only in the new branch. To go back to master
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout -b master
&lt;/code&gt;
To list all branches in github
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git remote -v
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve made awesome progress with the new branch and have a change in the new branch that you want to merge with the master so that this now becomes like the final proper version,&lt;/p&gt;

&lt;p&gt;Include stuff about making a pull request&lt;/p&gt;

&lt;p&gt;A number of times we have a lot of working files in our local repository which we do not want on github. They might list of things to do, large data files (which git might refuse to put on the hub), etc. But these files are always listed as untracked files and means we have to list each file we want to add instead of using git add -A. In these circumstances (even otherwise) it is good to maintain a gitignore file which will contain the list of all files and folders that you do not want git to track i.e. ignore.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
touch .gitignore
&lt;/code&gt;
Creates a gitignore file
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add .gitignore
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;.gitignore is a hidden file and needs to be edited to add all files and directory that should not be tracked
Sample .gitignore file&lt;/p&gt;

&lt;p&gt;```
directory1/
directory2/&lt;/p&gt;

&lt;p&gt;file1.csv
file2.csv
```&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jan 2020 12:00:00 -0500</pubDate>
        <link>http://meenurajapandian.github.io/blog/2020/01/20/git-github.html</link>
        <guid isPermaLink="true">http://meenurajapandian.github.io/blog/2020/01/20/git-github.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
